---

- name: convert deprecated format from list to dict for opn_packages
  ansible.builtin.set_fact:
    opn_packages:
      deprecated: "{{ opn_packages }}"
  when: opn_packages | type_debug == "list"

- name: Install opnsense packages
  community.general.pkgng:
    name: "{{ opn_packages.values() | list | flatten }}"
    state: present

- name: install {{ checkmk_agent_name }} from server
  block:
    - name: download {{ checkmk_agent_name }} from server
      delegate_to: localhost
      check_mode: false
      run_once: true
      ansible.builtin.get_url:
        url: "{{ checkmk_proto }}://{{ checkmk_hostname }}/{{ checkmk_path }}/{{ checkmk_agent_name }}"
        dest: "{{ _local_tmp }}/{{ checkmk_agent_name }}"
        mode: "0600"
        force: "{{ checkmk_agent_force_update | default(false) | bool }}"

    - name: apply patches
      delegate_to: localhost
      check_mode: false
      run_once: true
      ansible.posix.patch:
        src: "{{ item }}"
        dest: "{{ _local_tmp }}/{{ checkmk_agent_name }}"
        remote_src: false
      with_items: "{{  opn_check_mk_patches | default([]) }}"

    - name: copy {{ checkmk_agent_name }} from {{ _local_tmp }}
      ansible.builtin.copy:
        src: "{{ _local_tmp }}/{{ checkmk_agent_name }}"
        dest: "{{ opn_check_mk_path }}"
        mode: 0700
      notify: service inetd
  when:
    - opn_install_check_mk | bool
    - checkmk_hostname is defined

- name: copy {{ checkmk_agent_name }} from local files
  ansible.builtin.copy:
    src: "{{ checkmk_agent_name }}"
    dest: "{{ opn_check_mk_path }}"
    mode: 0700
  notify: service inetd
  when:
    - opn_install_check_mk | bool
    - checkmk_hostname is not defined

- name: create lib dirs
  ansible.builtin.file:
    path: "{{ opn_check_mk_lib_dir }}/{{ item }}"
    state: directory
    mode: 0755
  with_items:
    - local
    - plugins
  when: opn_install_check_mk | bool

- name: create venv
  ansible.builtin.pip:
    name: "{{ pippackages }}"
    virtualenv: "{{ opn_check_mk_lib_dir }}/venv"
    virtualenv_command: python3 -m venv
    virtualenv_site_packages: true

- name: create check_mk plugins cache dirs
  ansible.builtin.file:
    path: "{{ opn_check_mk_lib_dir }}/plugins/{{ item }}"
    state: directory
    mode: 0755
  with_items: "{{ opn_check_mk_plugins | map('dirname') | unique | list }}"
  when:
    - opn_install_check_mk | bool
    - item | length > 0

- name: copy check_mk plugins
  ansible.builtin.copy:
    src: "{{ lookup('ansible.builtin.first_found', _firstfound) }}"
    dest: "{{ opn_check_mk_lib_dir }}/plugins/{{ item }}"
    mode: 0700
  with_items: "{{ opn_check_mk_plugins }}"
  vars:
    _firstfound:
      paths:
        - files
      files:
        - "{{ item }}"
        - "{{ item | basename }}"
  when: opn_install_check_mk | bool

- name: convert deprecated format from list to dict for opn_check_mk_local_checks
  ansible.builtin.set_fact:
    opn_check_mk_local_checks: "{ 'deprecated' : {{ opn_check_mk_local_checks }} }"
  when: opn_check_mk_local_checks | type_debug == "list"

- name: create a uniq list of opn_check_mk_local_checks for internal use
  ansible.builtin.set_fact:
    _opn_check_mk_local_checks: "{{ opn_check_mk_local_checks.values() | list | flatten | unique | list }}"

- name: debug _opn_check_mk_local_checks
  ansible.builtin.debug:
    var: _opn_check_mk_local_checks
    verbosity: 1

- name: create check_mk local checks cache dirs
  ansible.builtin.file:
    path: "{{ opn_check_mk_lib_dir }}/local/{{ item }}"
    state: directory
    mode: 0755
  with_items: "{{ _opn_check_mk_local_checks | map('dirname') | unique | list }}"
  when:
    - opn_install_check_mk | bool
    - item | length > 0

- name: copy check_mk local checks
  ansible.builtin.copy:
    src: "{{  lookup('ansible.builtin.first_found', _firstfound) }}"
    dest: "{{ opn_check_mk_lib_dir }}/local/{{ item }}"
    mode: 0700
  with_items: "{{ _opn_check_mk_local_checks }}"
  vars:
    _firstfound:
      paths:
        - files
      files:
        - "{{ item }}"
        - "{{ item | basename }}"
  when: opn_install_check_mk | bool

- name: copy check_mk additional files
  ansible.builtin.copy:
    src: "{{ item.key }}"
    dest: "{{ item.value }}"
    mode: 0600
  with_dict: "{{ opn_check_mk_additional_files }}"
  when: opn_install_check_mk | bool

- name: create {{ opn_check_mk_conf_dir }}
  ansible.builtin.file:
    path: "{{ opn_check_mk_conf_dir }}"
    state: directory
    mode: 0755
  when:
    - opn_install_check_mk | bool

- name: deploy mrpe.cfg
  ansible.builtin.template:
    src: mrpe.cfg.j2
    dest: "{{ opn_check_mk_conf_dir }}/mrpe.cfg"
    mode: "0644"
  when:
    - opn_install_check_mk | bool
    - opn_check_mk_mrpe_checks | length > 0

- name: enable check_mk_agent in /etc/inetd.conf
  ansible.builtin.lineinfile:
    path: /etc/inetd.conf
    line: "check_mk  stream  tcp nowait  root  {{ opn_check_mk_path }} {{ opn_check_mk_path | basename }}"
    regexp: "^check_mk "
  notify: service inetd
  when: opn_install_check_mk | bool

- name: add service to /etc/services
  ansible.builtin.lineinfile:
    path: /etc/services
    line: "check_mk	{{ opn_check_mk_port }}/tcp   #check_mk agent"  # noqa no-tabs
    regexp: "^check_mk "
  notify: service inetd
  when: opn_install_check_mk | bool

- name: setup /etc/hosts.allow
  ansible.builtin.lineinfile:
    path: /etc/hosts.allow
    line: "check_mk	: {{ checkmk_ip }} : allow"  # noqa no-tabs
    regexp: "^check_mk "
  notify: service inetd
  when: opn_install_check_mk | bool

- name: debug ansible_local
  ansible.builtin.debug:
    var: ansible_local
    verbosity: 1

- name: enable inetd
  ansible.builtin.blockinfile:
    backup: true
    path: /etc/rc.conf
    block: |
      inetd_enable=yes
      inetd_flags=-wW
    marker: "# -- {mark} ANSIBLE MANAGED BLOCK for inetd -->"
  when: ansible_local.opnsense.core.product_series|default(ansible_local.opnsense.core.product_abi) is version('21', '<')
  notify: service inetd

- name: enable inetd
  ansible.builtin.blockinfile:
    backup: true
    path: /etc/rc.conf.d/inetd
    create: true
    block: |
      inetd_enable=yes
      inetd_flags=-wW
    marker: "# -- {mark} ANSIBLE MANAGED BLOCK for inetd -->"
    owner: root
    group: wheel
    mode: 0644
  when: ansible_local.opnsense.core.product_series|default(ansible_local.opnsense.core.product_abi) is version('21', '>=')
  notify: service inetd

...
# vim: tabstop=2 expandtab shiftwidth=2 softtabstop=2 smartindent nu ft=yaml
